<?php

/**
 * @file
 * Main bootstrap file of the dd_tools module.
 */
// Calls block specific hooks and overrides & blocks content.
require_once dirname(__FILE__) . '/dd_tools.blocks.inc';

/*
 * Implements preprocess node
 */

function dd_tools_preprocess_node(&$vars) {
  $vars['article_number'] = $vars['nid'];
  if ($vars['view_mode'] == 'hero_teaser') {
    $vars['theme_hook_suggestions'][] = 'node__' . $vars['type'] . '__hero_teaser';
  }
  if ($vars['view_mode'] == 'teaser') {
    $vars['theme_hook_suggestions'][] = 'node__' . $vars['type'] . '__teaser';
  }
  if ($vars['type'] == 'object') {
//    $vars['content']['field_image'] = array_shift(array_slice($vars['content']['field_image'], 0, 1));
    $vars['classes_array'][] = 'slide';
  }
//  dpm($vars);
}

/**
 * Implements hook entity info alter
 * Mainly used for adding view modes (extra teasers n stuff)
 */
function dd_tools_entity_info_alter(&$entity_info) {
  $entity_info['node']['view modes']['hero_teaser'] = array(
      'label' => t('Hero teaser'),
      'custom settings' => TRUE,
  );
}

/** * Implementation of hook_menu_alter(). *

 * TODO: make this work
 * @param type $menu /
 */
function dd_tools_menu_alter(&$menu) {
  if (isset($menu['taxonomy/term/%'])) {
    $menu['taxonomy/term/%']['page callback'] = 'dd_tools_taxonomy_term_page';
    $menu['taxonomy/term/%']['access callback'] = 'user_access';
    $menu['taxonomy/term/%']['access arguments'] = 'access content';
  }
}

/** * Callback function for taxonomy/term/%. * * @param $tid * The term id. * * @return * Themed page for a taxonomy term, specific to the term's vocabulary. 
  TODO make this work??
 *  */
function dd_tools_taxonomy_term_page($tid) {
  //dpm('dssdvsdv');
  $term = taxonomy_get_term($tid);
  $vocabulary = taxonomy_vocabulary_load($term->vid);
  switch ($vocabulary->name) {
    case 'Keyword': // Returns a custom view. 
      return views_embed_view('projects', 'term_block', $tid);
    case 'Subject': // Returns a page themed by mymodule. 
      return mymodule_subject_page($tid);
    default: // Returns the default term page provided by taxonomy module. 
      module_load_include('inc', 'taxonomy', 'taxonomy.pages');
      return taxonomy_term_page($tid);
  }
}

/**
 * Implements hook_node_view().
 *
 * Adds a link to the contact form
 */
function dd_tools_node_view($node, $view_mode, $langcode) {
  switch ($node->type) {
    case 'object':
      $node->content['adhesive_tape_contact_subject'] = array(
          '#type' => 'item',
          '#title' => t('Contact: '),
          '#markup' => l(
                  t('Ask a question about this object'), 'contact', array(
              'attributes' => array(
                  'class' => 'nice-link'
              ),
              'query' => array(
                  'subject' => $node->title . ' - ' . $node->nid
              )
                  )
          )
      );
      break;
  }
}

/**
 * Implements hook_field_extra_fields().
 *
 * Declare our Facebook Like button as a pseudo-field.
 */
function dd_tools_field_extra_fields() {
  // The levels of the array that we return correspond to the
  // entity type, bundle and then either 'display' or 'form'.
  // In this case, we apply to 'page' nodes, when we display them.
  $extra['node']['object']['display'] = array(
      // The keys here must correspond to the keys of the items
      // that we add in our hook_node_view() or similar function.
      // Prefix it with our module name to ensure it doesn't clash
      // with anything from other modules.
      'adhesive_tape_contact_subject' => array(
          'label' => t('Custom link to contact form that sends subject along'),
          'description' => t('Custom link to contact form that sends subject along, added in adhesive_tape_node_view().'),
          'weight' => 10,
      ),
  );
  return $extra;
}

function dd_tools_form_object_node_form_alter(&$form, &$form_state, $form_id) {
  $form['options']['authorn'] = $form['author']['name'];
  $form['options']['authord'] = $form['author']['date'];
  $form['options']['authorn']['#weight'] = 98;
  $form['options']['authord']['#weight'] = 99;
  unset($form['author']);
  unset($form['print']);
  $form['#validate'][] = 'adhesive_tape_validate_node_form';
  // $form['options']['field_in_the_spotlight'] = $form['field_in_the_spotlight'];
  $form['meta_info'] = array(
      '#type' => 'fieldset',
      '#title' => t('Meta informatie'),
      '#description' => t('Prijs, materiaal, categorie, etc'),
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
      '#group' => 'additional_settings',
  );
  $form['meta_info']['field_prijs'] = $form['field_prijs'];
  unset($form['field_prijs']);
  $form['meta_info']['field_gewicht'] = $form['field_gewicht'];
  unset($form['field_gewicht']);
//  $form['meta_info']['field_article_number'] = $form['field_article_number'];
//  unset($form['field_article_number']);
  $form['meta_info']['taxonomy_vocabulary_8'] = $form['taxonomy_vocabulary_8'];
  unset($form['taxonomy_vocabulary_8']);
  $form['meta_info']['taxonomy_vocabulary_7'] = $form['taxonomy_vocabulary_7'];
  unset($form['taxonomy_vocabulary_7']);
  $form['meta_info']['taxonomy_vocabulary_6'] = $form['taxonomy_vocabulary_6'];
  unset($form['taxonomy_vocabulary_6']);

  // taxo terms: 8 = jaar, 7 = cat, 6 = materiaal
  // order fields within met info
  $form['meta_info']['taxonomy_vocabulary_6']['#weight'] = -4;
  $form['meta_info']['taxonomy_vocabulary_7']['#weight'] = -5;
  $form['meta_info']['taxonomy_vocabulary_8']['#weight'] = 99;
  $form['meta_info']['field_article_number']['#weight'] = 100;

  // order of verti tabs
  $form['options']['#weight'] = 5; // this one is the vertical tab named "Publishing options"
  $form['meta_info']['#weight'] = 0; // this one is the vertical tab named "Publishing options"
  $form['path']['#weight'] = 10; // this one is the vertical tab named "Publishing options"
}
