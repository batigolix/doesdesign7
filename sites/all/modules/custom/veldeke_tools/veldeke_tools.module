<?php

require_once 'veldeke_tools.theme.inc';

/**
 * @file
 * Main bootstrap file of the veldeke_tools module.
 */

/**
 * Implements hook_menu().
 *
 */
function veldeke_tools_menu() {
  $menu = array();
  $menu['test'] = array(
      'title' => 'Test',
      'description' => '',
      'page callback' => 'veldeke_tools_test',
      'access arguments' => array('access content'),
      'file' => 'veldeke_tools.pages.inc',
      'type' => MENU_NORMAL_ITEM,
      'weight' => 0,
  );

  $menu['veldeke_tools/search_terms_autocomplete_callback'] = array(
      'page callback' => 'veldeke_tools_search_terms_autocomplete_callback',
      'type' => MENU_CALLBACK,
      'access arguments' => array('access content'),
  );

  $menu['terms/%/%'] = array(
      'title' => 'Terms',
      'description' => 'View terms',
      'page callback' => 'veldeke_tools_terms',
      'page arguments' => array(1, 2),
      'access arguments' => array('access content'),
      'file' => 'veldeke_tools.pages.inc',
      'type' => MENU_NORMAL_ITEM,
      'weight' => 0,
  );

  $menu['admin/config/system/veldeke_tools'] = array(
      'title' => 'Veldeke tools',
      'description' => 'Collection of nifty tools for veldeke project',
      'page callback' => 'system_admin_menu_block_page',
      'access arguments' => array('administer site configuration'),
      'file' => 'system.admin.inc',
      'file path' => drupal_get_path('module', 'system'),
      'weight' => '0',
  );
  $menu['admin/config/system/veldeke_tools/settings'] = array(
      'title' => 'veldeke tools settings',
      'description' => 'Configuration for veldeke tools',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('veldeke_settings'),
      'access arguments' => array('administer site configuration'),
      'file' => 'veldeke_tools.forms.inc',
  );
  $menu['admin/config/system/veldeke_tools/import_dictionary'] = array(
      'title' => 'Import dictionary',
      'description' => 'Import dictionary with NL en LI terms',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('veldeke_tools_import_dictionary_form'),
      'access arguments' => array('administer veldeke'),
//      'type' => MENU_CALLBACK,
      'file' => 'veldeke_tools.forms.inc',
  );

  $menu['admin/config/system/veldeke_tools/test'] = array(
      'title' => 'Test',
      'description' => '',
      'page callback' => 'veldeke_tools_test',
      'file' => 'veldeke_tools.pages.inc',
      'type' => MENU_NORMAL_ITEM,
      'weight' => 0,
      'access arguments' => array('administer site configuration'),
  );

  $menu['admin/config/system/veldeke_tools/export'] = array(
      'title' => 'Export bodies to csv-ish',
      'page callback' => 'veldeke_tools_export',
      'access arguments' => array('administer nodes'),
      'file' => 'veldeke_tools.pages.inc',
  );

  return $menu;
}

//
function veldeke_tools_search_terms_autocomplete_callback($string = "") {
  $matches = array();
  if ($string) {


    $or = db_or();
    $or->condition('nl_term', db_like($string) . '%', 'LIKE');
    $or->condition('li_term', db_like($string) . '%', 'LIKE');

    $result = db_select('veldeke_dictionary')
            ->fields('veldeke_dictionary', array('nl_term', 'li_term'))
            ->condition($or)
            ->range(0, 10)
            ->execute();
    foreach ($result as $term) {
      // In the simplest case (see user_autocomplete), the key and the value are the same. Here we'll display the
      // uid along with the username in the dropdown.
      $matches[$term->nl_term] = check_plain($term->nl_term) . " " . $term->li_term;
    }
  }

  drupal_json_output($matches);
}

//SELECT title FROM pages WHERE my_col LIKE %$param1% OR another_col LIKE %$param2%;
//SELECT title FROM pages WHERE my_col LIKE %$param1% OR another_col LIKE %$param2%;

/**
 * Implements hook_permission()
 */
function veldeke_tools_permission() {
  return array(
      'administer veldeke' => array(
          'title' => t('Administer Veldeke'),
          'description' => t('Do some configuration for Veldeke'),
      ),
  );
}

/**
 * Returns entity id from term with rx id
 * maps drupal entities with external data (e.g. from csv)
 * code slightly hackish. only works with text field etc
 */
function veldeke_tools_entid_from_code($code, $bundle, $field_name) {
  $query = db_select('field_data_' . $field_name, 'fdfc');
  $query->condition('fdfc.bundle', $bundle);
  $query->condition('fdfc.field_' . $field_name . '_value', $code);
  $query->addField('fdfc', 'entity_id', 'entid');
  $results = $query->execute();
  return $results->fetchField();
}

/**
 * Returns a entity id based on field value
 * only for text fields!
 * will probably fail miserably when field value is not unique or field type is
 * not text
 */
function veldeke_tools_get_entity_id_from_field_value($value, $field_name, $bundle) {
  $query = db_select('field_data_' . $field_name, 'fd');
  $query->condition('fd.bundle', $bundle);
  $query->condition('fd.' . $field_name . '_value', $value);
  $query->addField('fd', 'entity_id', 'eid');
  $result = $query->execute();
  return $result->fetchField();
}

function veldeke_tools_slugify($string) {
  return strtolower(preg_replace('/[^a-zA-Z0-9-]+/', '-', check_plain($string)));
}

/**
 * Retrieves term object by term name
 * @param type $term_name
 * @param type $machine_name
 * @return type
 */
function veldeke_tools_get_term($term_name, $machine_name) {
  $terms = taxonomy_get_term_by_name($term_name, $machine_name);
  $term = reset($terms); // flatten results because we can only use single result
  return $term;
}

/**
 * Implements hook block info
 * Defines custom blocks
 */
function veldeke_tools_block_info() {
  $blocks['search_terms'] = array(
      'info' => t('Veldeke tools: search terms'),
      'cache' => DRUPAL_CACHE_GLOBAL,
  );
  $blocks['dictionary'] = array(
      'info' => t('Veldeke tools: dictionary'),
      'cache' => DRUPAL_CACHE_GLOBAL,
  );

  $blocks['dictionary_toc'] = array(
      'info' => t('Veldeke tools: dictionary TOC'),
      'cache' => DRUPAL_CACHE_GLOBAL,
  );

  return $blocks;
}

/**
 * Defines title and content of custom blocks
 * Defines which function is called for block. Functions can be found in
 * carcan_awar_blocks.inc
 */
function veldeke_tools_block_view($delta = '') {
  $blocks = array();
  switch ($delta) {
    case 'search_terms':
      $blocks['content'] = drupal_get_form('veldeke_tools_search_terms_form');
      break;
    case 'dictionary':
      $blocks['subject'] = t('Dictionary');
      $blocks['content'] = veldeke_tools_lang_nav() . veldeke_tools_az_browse();
      break;
    case 'dictionary_toc':
      $blocks['subject'] = t('Dictionary table of contents');
      $blocks['content'] = veldeke_tools_dictionary_toc();
      break;
  }
  return $blocks;
}

/*
 * Implements preproces_block
 * Adds humane block classes
 */

function veldeke_tools_preprocess_block(&$vars, $hook) {
  //lets look for unique block in a region $region-$blockcreator-$delta
  $block = $vars['elements']['#block']->module . '-' . $vars['elements']['#block']->delta;
  //dsm($block);
  switch ($block) {
    case 'veldeke_tools-test':
      $vars['classes_array'][] = 'biltxtilt';
      break;
    default:
      break;
  }
}

/**
 * Returns html for custom main menu
 * @return string
 */
function veldeke_tools_ordinal($number) {
  $ends = array('th', 'st', 'nd', 'rd', 'th', 'th', 'th', 'th', 'th', 'th');
  if (($number % 100) >= 11 && ($number % 100) <= 13)
    $abbreviation = $number . 'th';
  else
    $abbreviation = $number . $ends[$number % 10];
  return $abbreviation;
}

/**
 * Returns html for lang navigation
 */
function veldeke_tools_lang_nav($letter = 'a') {
  $items[] = array('data' => l('Nederlands', 'terms/nl/' . $letter));
  $items[] = array('data' => l('Venloos', 'terms/li/' . $letter));
  return theme('item_list', array('items' => $items, 'title' => NULL, 'type' => 'ul', 'attributes' => array('class' => 'lang-nav')));
}

/**
 * 
 */
function veldeke_tools_import_dictionary() {
  $num_deleted = db_delete('veldeke_dictionary')
          ->execute();
  drupal_set_message($num_deleted . ' terms deleted');
  $csv_file = 'https://docs.google.com/spreadsheet/pub?key=0AgLDdff6gGPwdHVzM2pmQkZjSXVDUUwybkpQWGROVkE&single=true&gid=0&output=csv';
  $csv_string = get_data($csv_file);
  $terms = csv_to_array($csv_string); //parse the rows 
  unset($terms[0]); // header csv
  if (variable_get('debug_mode') == 1) {
    $terms = array_slice($terms, 1750, 50);
  }
  //dpm($terms);
  foreach ($terms as $term) {
    $operations[] = array('veldeke_tools_import_dictionary_term', array($term));
  }
  $batch = array(
      'operations' => $operations,
      'finished' => 'veldeke_tools_import_dictionary_finished',
  );
  return $batch;
}

function veldeke_tools_import_dictionary_term($term, &$context) {
  //dsm(_remove_accents($term[3]).'--');
  $context['results'][] = $term[0] . ' : ' . check_plain($term[2]);
  $context['message'] = t('Importing "@title"', array('@title' => $term[2]));
  $nl_letter = strtolower(_remove_accents($term[2]));

  $li_letter = strtolower(_remove_accents($term[3]));
  try {
    db_insert('veldeke_dictionary')
            ->fields(array(
                'updated' => check_plain($term[1]),
                'dtid' => $term[0],
                'nl_term' => check_plain($term[2]),
                'li_term' => check_plain($term[3]),
                'misc' => check_plain($term[4]),
                'nl_letter' => $nl_letter[0],
                'li_letter' => $li_letter[0],
            ))
            ->execute();
    drupal_set_message($term[2] . ' imported');
  } catch (Exception $e) {
    watchdog('veldeke_tools', 'Problem import %id - %nl_term -- %e', array('%e' => $e, '%id' => $term[0], '%nl_term' => $term[2]), WATCHDOG_ERROR);
  }
  $output = 'importing ditionary';
  return $output;
}

function veldeke_tools_import_dictionary_finished($success, $results, $operations) {
  if ($success) {
    drupal_set_message(t('@count terms imported.', array('@count' => count($results))));
  } else {
    $error_operation = reset($operations);
    drupal_set_message(t('An error occurred while processing @operation with arguments : @args', array('@operation' => $error_operation[0], '@args' => print_r($error_operation[0], TRUE))));
  }
}

function veldeke_tools_fetch_terms($lang, $letter) {
  $query = db_select('veldeke_dictionary', 'vd');
  $query->fields('vd', array('nl_term', 'li_term', 'misc'));
  if ($lang == 'li') {
    $query->condition('vd.li_letter', $letter);
  } else {
    $query->condition('vd.nl_letter', $letter);
  }
//  $result = $query->execute();
  $results = $query->execute();
  if (variable_get('debug_mode') == 1) {
    dpm((string) $query);
    dpm($query->arguments());
  }
  $data = array();
  foreach ($results as $result) {
    $data[] = array(
        'term' => $lang == 'li' ? $result->li_term : $result->nl_term,
        'definitions' => $lang == 'li' ? $result->nl_term : theme('definition', array('definition' => $result->li_term, 'misc' => $result->misc)),
    );
  }
  return $data;
}

function veldeke_tools_search_terms_form($form, &$form_state) {
  $form['user'] = array(
      '#type' => 'textfield',
      '#size' => 12,
      '#title' => t('Choose'),
      // The autocomplete path is provided in hook_menu in ajax_example.module.
      '#autocomplete_path' => 'veldeke_tools/search_terms_autocomplete_callback',
  );

  return $form;
}

function veldeke_tools_az_browse($lang = 'nl') {
  $type = 'ul';
  $attributes = array(
      'class' => 'az-browser',
  );
  $items = array();
  foreach (range('A', 'Z') as $char) {
    $items[] = array('data' => l($char, 'terms/' . $lang . '/' . $char));
  }
  return theme('item_list', array('items' => $items, 'title' => 'Browse', 'type' => $type, 'attributes' => $attributes));
}

function veldeke_tools_dictionary_toc() {
  $type = 'ul';
  $attributes = array(
      'class' => 'dictionary_toc',
  );
  $items = array();
  foreach (range('A', 'Z') as $char) {
    $items[] = array('data' => l(t('Words with an @char', array('@char' => $char)), 'terms/nl/' . $char));
  }
  return theme('item_list', array('items' => $items, 'title' => NULL, 'type' => $type, 'attributes' => $attributes));
}

/**
 * Returns data for the exposition table
 * TODO: at some point in future: replace w user manageable data
 * TODO: add real data
 * @return array
 */
function veldeke_tools_fetch_data($csv_file) {

  $file = get_data($csv_file);

  while (($row = fgetcsv($file, 1000, ',')) !== FALSE) {
    $data[] = $row;
  }

  dpm($data);

//  $data = _csv_to_array($csv_file, ',');

  return $data;
}

// returns a two-dimensional array or rows and fields

function parse_csv($csv_string, $delimiter = ",", $skip_empty_lines = true, $trim_fields = true) {
  $enc = preg_replace('/(?<!")""/', '!!Q!!', $csv_string);
  $enc = preg_replace_callback(
          '/"(.*?)"/s', function ($field) {
            return urlencode(utf8_encode($field[1]));
          }, $enc
  );
  $lines = preg_split($skip_empty_lines ? ($trim_fields ? '/( *\R)+/s' : '/\R+/s') : '/\R/s', $enc);
  return array_map(
                  function ($line) use ($delimiter, $trim_fields) {
                    $fields = $trim_fields ? array_map('trim', explode($delimiter, $line)) : explode($delimiter, $line);
                    return array_map(
                                    function ($field) {
                                      return str_replace('!!Q!!', '"', utf8_decode(urldecode($field)));
                                    }, $fields
                    );
                  }, $lines
  );
}

/* gets the data from a URL */

function get_data($url) {
  $ch = curl_init();
  $timeout = 5;
  curl_setopt($ch, CURLOPT_URL, $url);
  curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
  curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, $timeout);
  $data = curl_exec($ch);
  curl_close($ch);
  return $data;
}

function _remove_accents($str) {
  //dsm($str);
  $from = array(
      "á", "à", "â", "ã", "ä", "é", "è", "ê", "ë", "í", "ì", "î", "ï",
      "ó", "ò", "ô", "õ", "ö", "ú", "ù", "û", "ü", "ç", "Á", "À", "Â",
      "Ã", "Ä", "É", "È", "Ê", "Ë", "Í", "Ì", "Î", "Ï", "Ó", "Ò", "Ô",
      "Õ", "Ö", "Ú", "Ù", "Û", "Ü", "Ç"
  );
  $to = array(
      "a", "a", "a", "a", "a", "e", "e", "e", "e", "i", "i", "i", "i",
      "o", "o", "o", "o", "o", "u", "u", "u", "u", "c", "A", "A", "A",
      "A", "A", "E", "E", "E", "E", "I", "I", "I", "I", "O", "O", "O",
      "O", "O", "U", "U", "U", "U", "C"
  );
  $str = str_replace($from, $to, $str);
  //dsm($str);
  return $str;
}

function csv_to_array($csv, $delimiter = ',', $enclosure = '"', $escape = '\\', $terminator = "\n") {
  $r = array();
  $rows = explode($terminator, trim($csv));
//    $names = array_shift($rows); 
//    $names = str_getcsv($names,$delimiter,$enclosure,$escape); 
//    $nc = count($names); 
  foreach ($rows as $row) {
    if (trim($row)) {
      $values = str_getcsv($row, $delimiter, $enclosure, $escape);
//            if (!$values) $values = array_fill(0,$nc,null); 
      $r[] = $values;
    }
  }
  return $r;
}

